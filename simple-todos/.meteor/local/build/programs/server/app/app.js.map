{"version":3,"sources":["meteor://ðŸ’»app/imports/api/classes.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Classes","Subjects","Reviews","Mongo","watch","require","v","HTTP","check","Collection","schema","SimpleSchema","_id","type","String","classSub","classNum","Number","classTitle","classAtten","classPrereq","optional","classFull","classSems","subShort","subFull","user","text","difficulty","quality","grade","date","Date","visible","Meteor","methods","insert","review","classId","diff","medGrade","undefined","regex","RegExp","test","makeVisible","update","$set","removeReview","remove","addNewSemester","initiate","isServer","addAllCourses","getCourseById","courseId","c","find","fetch","startup","_ensureIndex","publish","validClasses","searchString","console","log","limit","validReviews","visiblity","ret","semesters","semester","result","call","timeout","statusCode","response","JSON","parse","content","sub","data","subjects","course","parent","checkSub","value","toLowerCase","length","descr","result2","response2","courses","classes","subject","catalogNbr","titleLong","matchedCourse","oldSems","indexOf","push","error","findCurrSemester","allSemesters","rosters","thisSem","slug","findAllSemesters","allSemestersArray","map","semesterObject"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { HTTP } from 'meteor/http';\nimport { check } from 'meteor/check';\n\nexport const Classes = new Mongo.Collection('classes');\nClasses.schema = new SimpleSchema({\n  _id: {type: String},\n  classSub: {type: String},\n  classNum: {type: Number},\n  classTitle: {type: String},\n  classAtten: {type: Number},\n  classPrereq : { type: [String] ,optional: true},\n  classFull: {type: String},\n  classSems: {type: [String]}\n});\n\nexport const Subjects = new Mongo.Collection('subjects');\nSubjects.schema = new SimpleSchema({\n\t_id: {type: String},\n\tsubShort : {type: String},\n\tsubFull: {type: String}\n});\n\nexport const Reviews = new Mongo.Collection('reviews');\nReviews.schema = new SimpleSchema({\n\t_id: {type: String},\n\tuser: {type: String},\n\ttext: {type: String,optional: true},\n\tdifficulty: {type: Number},\n\tquality: {type: Number},\n \tclass: {type: String}, //ref to classId\n \tgrade: {type: Number},\n \tdate: {type: Date},\n \tvisible: {type: Number}\n});\n\n// defines all methods that will be editing the database so that database changes occur only on the server\nMeteor.methods({\n\t//insert a new review into the reviews database\n\tinsert: function(review, classId) {\n\t\t//only insert if all necessary feilds are filled in\n\t\tif (review.text != null && review.diff != null && review.quality != null && review.medGrade != null && classId != undefined && classId != null) {\n\t\t\t//ensure there are no illegal characters\n\t\t\tvar regex = new RegExp(/^(?=.*[A-Z0-9])[\\w:;.,!()\"'\\/$ ]+$/i)\n\t\t\tif (regex.test(review.text)) {\n\t\t\t  \tReviews.insert({\n\t\t\t\t    text: review.text,\n\t\t\t\t    difficulty: review.diff,\n\t\t\t\t    quality: review.quality,\n\t\t\t\t    class: classId,\n\t\t\t\t    grade: review.medGrade,\n\t\t\t\t    date: new Date(),\n\t\t\t\t    visible: 0\n\t\t\t\t})\n\t\t\t\treturn 1 //success\n\t\t\t} else {\n\t\t\t\treturn 0 //fail\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0 //fail\n\t\t}\n\t},\n\t//make the reveiw with this id visible, checking to make sure it has a real id\n\tmakeVisible: function (review) {\n\t\tvar regex = new RegExp(/^(?=.*[A-Z0-9])/i)\n\t\tif (regex.test(review._id)) {\n   \t\t\tReviews.update(review._id, {$set: { visible: 1} })\n   \t\t\treturn 1\n   \t\t} else {\n   \t\t\treturn 0\n   \t\t}\n \t},\n \t//remove the review with this id, checking to make sure the id is a real id\n \tremoveReview: function(review) {\n \t\tvar regex = new RegExp(/^(?=.*[A-Z0-9])/i)\n\t\tif (regex.test(review._id)) {\n   \t\tReviews.remove({ _id: review._id})\n   \t\treturn 1\n   \t} else {\n   \t\treturn 0\n   \t}\n\t},\n\t//update the database to add any new classes in the current semester if they don't already exist. To be called from the admin page once a semester.\n\taddNewSemester: function(initiate) {\n\t\tif (initiate && Meteor.isServer) {\n\t\t\t//return addAllCourses(findCurrSemester());\n\t\t\treturn addAllCourses(['FA15']);\n\t\t}\n  },\n  //get the course (as an object) with this id, checking to make sure the id is real\n  getCourseById: function(courseId) {\n    //console.log(courseId);\n    var regex = new RegExp(/^(?=.*[A-Z0-9])/i)\n\n    if (regex.test(courseId)) {\n      var c = Classes.find({_id: courseId}).fetch()[0];\n      //console.log(c);\n   \t\treturn c;\n   \t}\n    return null\n  }\n});\n\n//Code that runs only on the server\nif (Meteor.isServer) {\n    Meteor.startup(() => { // code to run on server at startup\n\t  //add indexes to collections for faster search\n\t  Classes._ensureIndex(\n\t        { 'classSub' : 1 },\n\t        { 'classNum' : 1 },\n\t        { 'classTitle' : 1 },\n          { '_id' : 1}\n\t    );\n\t  Subjects._ensureIndex(\n\t  \t\t{ 'subShort' : 1 },\n\t        { 'subFull' : 1 }\n\t  \t);\n\t  Reviews._ensureIndex(\n\t    \t{ 'class' : 1},\n\t    \t{ 'difficulty' : 1 },\n\t    \t{ 'quality' : 1 },\n\t    \t{ 'grade' : 1 },\n\t    \t{ 'user' : 1 },\n\t    \t{ 'visible' : 1 }\n\t  \t);\n\t  });\n\n    //code that runs whenever needed\n    //\"publish\" classes based on search query. Only published classes are visible to the client\n    Meteor.publish('classes', function validClasses(searchString) {\n\t  \tif (searchString != undefined && searchString != \"\") {\n\t  \t\tconsole.log(\"query entered:\", searchString);\n\t  \t\treturn Classes.find({'$or' : [\n\t\t\t  { 'classSub':{ '$regex' : `.*${searchString}.*`, '$options' : '-i' }},\n\t\t\t  { 'classNum':{ '$regex' : `.*${searchString}.*`, '$options' : '-i' } },\n\t\t\t  { 'classTitle':{ '$regex' : `.*${searchString}.*`, '$options' : '-i' }},\n\t\t\t  { 'classFull':{ '$regex' : `.*${searchString}.*`, '$options' : '-i' }}]\n\n\t\t\t},\n\t\t\t{limit: 200});\n\t  \t}\n\t  \telse {\n        console.log(\"no search\");\n\t  \t\treturn Classes.find({},\n\t  \t\t{limit: 200});\n\t  \t}\n  \t});\n\n    //\"publish\" reviews based on selected course and visibility requirements. Only published reviews are visible to the client\n\tMeteor.publish('reviews', function validReviews(courseId, visiblity) {\n\t  \tvar ret = null\n\t  \t//show valid reviews for this course\n      console.log('getting reviews');\n\t  \tif (courseId != undefined && courseId != \"\" && visiblity == 1) {\n        console.log('in 1');\n\t  \t\tret =  Reviews.find({class : courseId, visible : 1}, {limit: 700});\n\t  \t} else if (courseId != undefined && courseId != \"\" && visiblity == 0) { //invalidated reviews for a class\n        console.log('in 2');\n        ret =  Reviews.find({class : courseId, visible : 0},\n\t\t\t{limit: 700});\n\t  \t} else if (visiblity == 0) { //all invalidated reviews\n\t  \t\tret =  Reviews.find({visible : 0}, {limit: 700});\n\t  \t} else { //no reviews\n\t  \t\t//will always be empty because visible is 0 or 1. allows meteor to still send the ready flag when a new publication is sent\n\t  \t\tret = Reviews.find({visible : 10});\n\t  \t}\n\t  \treturn ret\n  \t});\n\n  \t// COMMENT THESE OUT AFTER THE FIRST METEOR BUILD!!\n\t//Classes.remove({});\n\t//Subjects.remove({});\n\t//addAllCourses(findAllSemesters());\n}\n\n//Other helper functions used above\n\n// Adds all classes and subjects from Cornell's API between the selected semesters to the database.\n// Called when updating for a new semester and when initializing the database\nfunction addAllCourses(semesters) {\n    // var semesters = [\"SP17\", \"SP16\", \"SP15\",\"FA17\", \"FA16\", \"FA15\"];\n\tfor (semester in semesters) {\n\t\t//get all classes in this semester\n\t    var result = HTTP.call(\"GET\", \"https://classes.cornell.edu/api/2.0/config/subjects.json?roster=\" + semesters[semester], {timeout: 30000});\n\t    if (result.statusCode != 200) {\n\t      console.log(\"error\");\n\t    } else {\n\t\t  \tresponse = JSON.parse(result.content);\n\t\t  \t//console.log(response);\n\t\t\tvar sub = response.data.subjects;\n\t\t\tfor (course in sub) {\n\t\t\t    parent = sub[course];\n\t\t\t    //if subject doesn't exist add to Subjects collection\n\t\t\t    checkSub = Subjects.find({'subShort' : (parent.value).toLowerCase()}).fetch();\n\t\t\t    if (checkSub.length == 0) {\n\t\t\t     \tconsole.log(\"new subject: \" + parent.value);\n\t\t\t        Subjects.insert({\n\t\t\t        \tsubShort : (parent.value).toLowerCase(),\n\t\t\t        \tsubFull : parent.descr\n\t\t\t        });\n\t\t\t    }\n\n\t\t\t    //for each subject, get all classes in that subject for this semester\n\t\t\t    var result2 = HTTP.call(\"GET\", \"https://classes.cornell.edu/api/2.0/search/classes.json?roster=\" + semesters[semester] + \"&subject=\"+ parent.value, {timeout: 30000});\n\t\t\t    if (result2.statusCode != 200) {\n\t\t\t    \tconsole.log(\"error2\");\n\t\t\t    } else {\n\t\t\t    \tresponse2 = JSON.parse(result2.content);\n\t\t\t\t    courses = response2.data.classes;\n\n\t\t\t\t    //add each class to the Classes collection if it doesnt exist already\n\t\t\t\t    for (course in courses) {\n\t\t\t\t    \ttry {\n\t\t\t\t\t        var check = Classes.find({'classSub' : (courses[course].subject).toLowerCase(), 'classNum' : courses[course].catalogNbr}).fetch();\n\t\t\t\t\t        if (check.length == 0) {\n\t\t\t\t\t            console.log(\"new class: \" + courses[course].subject + \" \" + courses[course].catalogNbr + \",\" + semesters[semester]);\n\t\t\t\t\t        \t//insert new class with empty prereqs and reviews\n\t\t\t\t\t        \tClasses.insert({\n\t\t\t\t\t          \t\tclassSub : (courses[course].subject).toLowerCase(),\n\t\t\t\t\t          \t\tclassNum : courses[course].catalogNbr,\n\t\t\t\t\t          \t\tclassTitle : courses[course].titleLong,\n\t\t\t\t\t          \t\tclassPrereq : [],\n\t\t\t\t\t          \t\tclassFull: (courses[course].subject).toLowerCase() + \" \" + courses[course].catalogNbr +\" \" + courses[course].titleLong.toLowerCase(),\n\t\t\t\t\t          \t\tclassSems: [semesters[semester]]\n\t\t\t\t\t       \t\t});\n\t\t\t\t\t     \t} else {\n\t\t\t\t\t     \t\tvar matchedCourse = check[0] //only 1 should exist\n\t\t\t\t\t     \t\tvar oldSems = matchedCourse.classSems;\n\t\t\t\t\t        \tif (oldSems.indexOf(semesters[semester]) == -1) {\n\t\t\t\t\t        \t\tconsole.log(\"update class \" + courses[course].subject + \" \" + courses[course].catalogNbr + \",\" + semesters[semester]);\n\t\t\t\t\t\t        \toldSems.push(semesters[semester]) //add this semester to the list\n\t\t\t\t\t\t        \tClasses.update({_id: matchedCourse._id}, {$set: {classSems: oldSems}})\n\t\t\t\t\t\t        }\n\t\t\t\t\t      \t}\n\t\t\t\t\t    } catch(error){\n\t\t\t\t\t    \tconsole.log(course);\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t}\n}\n\n//returns an array of the current semester, to be given to the addAllCourses function\nfunction findCurrSemester()  {\n\tvar response = HTTP.call(\"GET\", \"https://classes.cornell.edu/api/2.0/config/rosters.json\", {timeout: 30000});\n\tif (response.statusCode != 200) {\n      console.log(\"error\");\n    } else {\n\t  \tresponse = JSON.parse(response.content);\n\t\tallSemesters = response.data.rosters;\n\t\tthisSem = allSemesters[allSemesters.length - 1].slug;\n\t\treturn [thisSem];\n\t}\n}\n\n//returns an array of all current semesters, to be given to the addAllCourses function\nfunction findAllSemesters() {\n\tvar response = HTTP.call(\"GET\", \"https://classes.cornell.edu/api/2.0/config/rosters.json\", {timeout: 30000});\n\tif (response.statusCode != 200) {\n      console.log(\"error\");\n    } else {\n\t  \tresponse = JSON.parse(response.content);\n\t\tallSemesters = response.data.rosters;\n\t\tvar allSemestersArray = allSemesters.map(function(semesterObject) {\n\t\t\treturn semesterObject.slug;\n\t\t})\n\t\tconsole.log(allSemestersArray)\n\t\treturn allSemestersArray\n\t}\n}\n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/classes.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}